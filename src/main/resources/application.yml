spring:
  application:
    name: TradeGuardServer
  datasource:
    url: ${DB_URL:jdbc:h2:mem:tradeguard}
    driver-class-name: ${DB_DRIVER_CLASS:org.h2.Driver}
    username: ${DB_USERNAME:sa}
    password: ${DB_PASSWORD:password}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    database-platform: ${JPA_DB_PLATFORM:org.hibernate.dialect.H2Dialect}
  h2:
    console:
      enabled: ${H2_CONSOLE_ENABLED:true}
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
  cache:
    type: ${CACHE_TYPE:redis}
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:19092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      properties:
        spring.json.add.type.headers: false
      retries: 3
    consumer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:19092}
      group-id: ${KAFKA_CONSUMER_GROUP:bff-group}
      auto-offset-reset: ${KAFKA_AUTO_OFFSET_RESET}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: korn03.tradeguardserver.model
        spring.json.value.default.type: korn03.tradeguardserver.model.JobEvent

server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${SERVER_CONTEXT_PATH:/api}

logging:
  file:
    name: logs/application.log
  logback:
    rollingpolicy:
      max-file-size: 10MB
      total-size-cap: 100MB
      max-history: 10
      clean-history-on-start: true
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg%n"
  level:
    root: INFO
    korn03:
      tradeguardserver:
        security: DEBUG
        endpoints:
          controller:
            auth: DEBUG
        service:
          sse: INFO
    org:
      springframework: WARN
      springframework.security: DEBUG
      apache:
        kafka: WARN
        kafka.clients.producer.ProducerConfig: ERROR
        kafka.clients.Metadata: WARN
      hibernate:
        SQL: OFF
        type.descriptor.sql.BasicBinder: OFF
    kafka: WARN


management:
  endpoints:
    web:
      exposure:
        include: health,info
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    info:
      enabled: true
  security:
    enabled: false  # Disable security for actuator endpoints

jwt:
  secret: ${JWT_SECRET:secret}
  expiration: ${JWT_EXPIRATION:86400000}

news:
  api:
    newsdata: ${NEWS_API_KEY:secret}
    cryptopanic: ${CRYPTOPANIC_API_KEY:secret}

discord:
  client:
    id: ${DISCORD_CLIENT_ID:1163160122541998200}
    secret: ${DISCORD_CLIENT_SECRET:secret}
  redirect:
    uri: tradeguard://auth/discord

tradeguard:
  default:
    user:
      username: ${USER_USERNAME:user}
      password: ${USER_PASSWORD:user1234}
    admin:
      username: ${ADMIN_USERNAME:admin}
      password: ${ADMIN_PASSWORD:admin1234}
    bybit:
      readonly:
        key: ${BYBIT_READONLY_KEY:}
        secret: ${BYBIT_READONLY_SECRET:}
      readwrite:
        key: ${BYBIT_READWRITE_KEY:}
        secret: ${BYBIT_READWRITE_SECRET:}
      demo:
        key: ${BYBIT_DEMO_KEY:}
        secret: ${BYBIT_DEMO_SECRET:}
    binance:
      readwrite:
        key: ${BINANCE_READWRITE_KEY:}
        secret: ${BINANCE_READWRITE_SECRET:}

kafka:
  topic:
    job-updates: ${KAFKA_TOPIC_JOB_UPDATES:job-updates}
    job-submissions: ${KAFKA_TOPIC_JOB_SUBMISSIONS:job-submissions}
    position-updates: ${KAFKA_TOPIC_POSITIONS:position-updates}
    order-flow: ${KAFKA_TOPIC_ORDER_FLOW:order-flow}
    equity: ${KAFKA_TOPIC_EQUITY_UPDATES:equity}
